AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function + API setup + S3 pathing + all roles

Parameters:
  LambdaFunctionName:
    Type: String
    Default: PollyLambdaFunction
    Description: Name for the Lambda function

  LambdaCodeBucket:
    Type: String
    Description: S3 bucket where the Lambda deployment package is stored

  LambdaCodeKey:
    Type: String
    Description: S3 key for the Lambda deployment package (e.g., path/to/lambda.zip)

  ApiStageName:
    Type: String
    Default: prod
    Description: HTTP API Stage name (use a different value per environment)

  S3Bucket:
    Type: String
    Description: S3 bucket for synthesized audio

  S3BucketPrefix:
    Type: String
    Default: ""
    Description: Prefix for path in bucket

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${LambdaFunctionName}-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PollySynthesizeandS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - polly:SynthesizeSpeech
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketLocation
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${S3Bucket}
                  - !Sub arn:${AWS::Partition}:s3:::${S3Bucket}/*

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 120
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Environment:
        Variables:
          S3_Bucket: !Ref S3Bucket
          S3_Bucket_Prefix: !Ref S3BucketPrefix

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${LambdaFunctionName}-HttpApi"
      ProtocolType: HTTP

  HttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "2.0"
      IntegrationUri: !GetAtt LambdaFunction.Arn

  HttpApiDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /synthesize"
      AuthorizationType: AWS_IAM
      Target: !Sub "integrations/${HttpApiIntegration}"

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref ApiStageName
      AutoDeploy: true

  PermissionForApiToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/${ApiStageName}/POST/synthesize"
